{"ast":null,"code":"\"use strict\";\n\n// import { Injectable } from '@angular/core';\n// import { BehaviorSubject, Observable, catchError, retry, throwError } from 'rxjs';\n// // import { STUDENTS_MOCKED } from 'src/mocks/student.mock';\n// import { Student } from 'src/models/student';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// @Injectable({\n//     providedIn: 'root'\n// })\n// export class StudentService {\n//     apiURL = 'http://localhost:3000';\n//     public studentList: Student[] = [];\n//     public students$: BehaviorSubject<Student[]> = new BehaviorSubject(this.studentList);\n//     constructor(private http: HttpClient) {\n//     }\n//     httpOption = {\n//         headers: new HttpHeaders({\n//             'content-type': 'application/json',\n//         })\n//     }\n//     getStudent(): Observable<Student> {\n//         return this.http.get<Student>(this.apiURL + '/students').pipe(retry(1), catchError(this.handleError));\n//     }\n//     handleError(error: any) {\n//         let errMsg = '';\n//         if (error.error instanceof ErrorEvent) errMsg = error.error.message;\n//         else errMsg = `Error Code : ${error.statut}\\nMessage : ${error.message}`;\n//         window.alert(errMsg);\n//         return throwError(() => {\n//             return errMsg;\n//         })\n//     }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Amir\\Desktop\\angular_tp\\Angular_Front\\src\\services\\student\\student.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { BehaviorSubject, Observable, catchError, retry, throwError } from 'rxjs';\r\n// // import { STUDENTS_MOCKED } from 'src/mocks/student.mock';\r\n// import { Student } from 'src/models/student';\r\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n// @Injectable({\r\n//     providedIn: 'root'\r\n// })\r\n\r\n// export class StudentService {\r\n\r\n//     apiURL = 'http://localhost:3000';\r\n//     public studentList: Student[] = [];\r\n//     public students$: BehaviorSubject<Student[]> = new BehaviorSubject(this.studentList);\r\n\r\n//     constructor(private http: HttpClient) {\r\n//     }\r\n//     httpOption = {\r\n//         headers: new HttpHeaders({\r\n//             'content-type': 'application/json',\r\n//         })\r\n//     }\r\n\r\n//     getStudent(): Observable<Student> {\r\n//         return this.http.get<Student>(this.apiURL + '/students').pipe(retry(1), catchError(this.handleError));\r\n//     }\r\n\r\n//     handleError(error: any) {\r\n//         let errMsg = '';\r\n//         if (error.error instanceof ErrorEvent) errMsg = error.error.message;\r\n//         else errMsg = `Error Code : ${error.statut}\\nMessage : ${error.message}`;\r\n//         window.alert(errMsg);\r\n//         return throwError(() => {\r\n//             return errMsg;\r\n//         })\r\n//     }\r\n// }"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}