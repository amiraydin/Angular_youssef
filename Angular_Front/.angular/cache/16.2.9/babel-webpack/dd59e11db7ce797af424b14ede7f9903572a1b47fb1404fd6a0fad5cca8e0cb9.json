{"ast":null,"code":"import { TICKETS_MOCKED } from '../../mocks/tickets.mock';\nimport { catchError, retry, throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  constructor(http) {\n    this.http = http;\n    /**\n     * Services Documentation:\n     * https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\n     */\n    this.ticketList = TICKETS_MOCKED;\n    // public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\n    this.apiURL = 'http://localhost:5000';\n    this.httpOption = {\n      headers: new HttpHeaders({\n        'content-type': 'application/json'\n      })\n    };\n  }\n  getUsers() {\n    return this.http.get(this.apiURL + '/api/students').pipe(retry(1), catchError(this.handleError));\n  }\n  getOneUser(id) {\n    return this.http.get(this.apiURL + '/api/students' + id).pipe(retry(1), catchError(this.handleError));\n  }\n  createUser(user) {\n    return this.http.post(this.apiURL + '/api/students', user, this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n  updateUser(id, user) {\n    return this.http.put(this.apiURL + '/api/students' + id, JSON.stringify(user), this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n  deleteUser(id) {\n    return this.http.delete(this.apiURL + '/api/students' + id, this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errMsg = '';\n    if (error.error instanceof ErrorEvent) errMsg = error.error.message;else errMsg = `Error Code : ${error.statut}\\nMessage : ${error.message}`;\n    window.alert(errMsg);\n    return throwError(() => {\n      return errMsg;\n    });\n  }\n  addTicket(ticket) {\n    this.ticketList.push(ticket);\n    // this.tickets$.next(this.ticketList);\n  }\n\n  archiveTicket(ticket) {\n    ticket.archived = true;\n    // this.tickets$.next(this.ticketList);\n  }\n  static #_ = this.ɵfac = function TicketService_Factory(t) {\n    return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TicketService,\n    factory: TicketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TICKETS_MOCKED","catchError","retry","throwError","HttpHeaders","TicketService","constructor","http","ticketList","apiURL","httpOption","headers","getUsers","get","pipe","handleError","getOneUser","id","createUser","user","post","updateUser","put","JSON","stringify","deleteUser","delete","error","errMsg","ErrorEvent","message","statut","window","alert","addTicket","ticket","push","archiveTicket","archived","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Amir\\Desktop\\angular_tp\\Angular_Front\\src\\services\\ticket\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Ticket } from '../../models/ticket';\r\nimport { TICKETS_MOCKED } from '../../mocks/tickets.mock';\r\nimport { BehaviorSubject, Observable, catchError, retry, throwError } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TicketService {\r\n  /**\r\n   * Services Documentation:\r\n   * https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\r\n   */\r\n  private ticketList: Ticket[] = TICKETS_MOCKED;\r\n  // public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\r\n\r\n  apiURL = 'http://localhost:5000';\r\n\r\n  httpOption = {\r\n    headers: new HttpHeaders({\r\n      'content-type': 'application/json',\r\n    })\r\n  }\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getUsers() {\r\n    return this.http.get<Ticket>(this.apiURL + '/api/students').pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n  getOneUser(id: any) {\r\n    return this.http.get<Ticket>(this.apiURL + '/api/students' + id).pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n  createUser(user: any) {\r\n    return this.http.post<Ticket>(this.apiURL + '/api/students', user, this.httpOption).pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n  updateUser(id: any, user: any) {\r\n    return this.http.put<Ticket>(this.apiURL + '/api/students' + id, JSON.stringify(user), this.httpOption).pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n  deleteUser(id: any) {\r\n    return this.http.delete<Ticket>(this.apiURL + '/api/students' + id, this.httpOption).pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n  handleError(error: any) {\r\n    let errMsg = '';\r\n    if (error.error instanceof ErrorEvent) errMsg = error.error.message;\r\n    else errMsg = `Error Code : ${error.statut}\\nMessage : ${error.message}`;\r\n    window.alert(errMsg);\r\n    return throwError(() => {\r\n      return errMsg;\r\n    })\r\n  }\r\n\r\n  addTicket(ticket: Ticket) {\r\n    this.ticketList.push(ticket);\r\n    // this.tickets$.next(this.ticketList);\r\n  }\r\n\r\n  archiveTicket(ticket: Ticket) {\r\n    ticket.archived = true;\r\n    // this.tickets$.next(this.ticketList);\r\n  }\r\n  // deleteTicket(ticket: Ticket): void {\r\n  //   this.ticketList = this.ticketList.filter(({ title }) => title !== title);\r\n  // }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}