{"ast":null,"code":"import { TICKETS_MOCKED } from '../../mocks/tickets.mock';\nimport * as i0 from \"@angular/core\";\n// import { BehaviorSubject } from 'rxjs/index';\nexport class TicketService {\n  /**\n   * Observable which contains the list of the tickets.\n   * Naming convention: Add '$' at the end of the variable name to highlight it as an Observable.\n   */\n  // public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\n  constructor() {\n    /**\n     * Services Documentation:\n     * https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\n     */\n    this.ticketList = TICKETS_MOCKED;\n  }\n  addTicket(ticket) {\n    // You need here to update the list of ticket and then update our observable (Subject) with the new list\n    // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\n  }\n  static #_ = this.ɵfac = function TicketService_Factory(t) {\n    return new (t || TicketService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TicketService,\n    factory: TicketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TICKETS_MOCKED","TicketService","constructor","ticketList","addTicket","ticket","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Amir\\Desktop\\angular_tp\\Angular_Front\\src\\services\\ticket\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Ticket } from '../../models/ticket';\r\nimport { TICKETS_MOCKED } from '../../mocks/tickets.mock';\r\n// import { BehaviorSubject } from 'rxjs/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TicketService {\r\n  /**\r\n   * Services Documentation:\r\n   * https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\r\n   */\r\n\r\n  private ticketList: Ticket[] = TICKETS_MOCKED;\r\n\r\n  /**\r\n   * Observable which contains the list of the tickets.\r\n   * Naming convention: Add '$' at the end of the variable name to highlight it as an Observable.\r\n   */\r\n  // public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\r\n\r\n  constructor() {\r\n  }\r\n\r\n  addTicket(ticket: Ticket) {\r\n    // You need here to update the list of ticket and then update our observable (Subject) with the new list\r\n    // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,cAAc,QAAQ,0BAA0B;;AACzD;AAKA,OAAM,MAAOC,aAAa;EAQxB;;;;EAIA;EAEAC,YAAA;IAbA;;;;IAKQ,KAAAC,UAAU,GAAaH,cAAc;EAS7C;EAEAI,SAASA,CAACC,MAAc;IACtB;IACA;EAAA;EACD,QAAAC,CAAA,G;qBApBUL,aAAa;EAAA;EAAA,QAAAM,EAAA,G;WAAbN,aAAa;IAAAO,OAAA,EAAbP,aAAa,CAAAQ,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}