{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, retry, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiURL = 'http://localhost:5000';\n    this.httpOption = {\n      headers: new HttpHeaders({\n        'content-type': 'application/json'\n      })\n    };\n  }\n  getUsers() {\n    return this.http.get(this.apiURL + '/api/students').pipe(retry(1), catchError(this.handleError));\n  }\n  getOneUser(id) {\n    return this.http.get(this.apiURL + '/api/students' + id).pipe(retry(1), catchError(this.handleError));\n  }\n  createUser(user) {\n    return this.http.post(this.apiURL + '/api/students/', JSON.stringify(user), this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n  updateUser(id, user) {\n    return this.http.put(this.apiURL + '/api/students' + id, JSON.stringify(user), this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n  deleteUser(id) {\n    return this.http.delete(this.apiURL + '/api/studens/' + id, this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errMsg = '';\n    if (error.error instanceof ErrorEvent) errMsg = error.error.message;else errMsg = `Error Code : ${error.statut}\\nMessage : ${error.message}`;\n    window.alert(errMsg);\n    return throwError(() => {\n      return errMsg;\n    });\n  }\n  static #_ = this.ɵfac = function UserApiService_Factory(t) {\n    return new (t || UserApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserApiService,\n    factory: UserApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","catchError","retry","throwError","UserApiService","constructor","http","apiURL","httpOption","headers","getUsers","get","pipe","handleError","getOneUser","id","createUser","user","post","JSON","stringify","updateUser","put","deleteUser","delete","error","errMsg","ErrorEvent","message","statut","window","alert","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Amir\\Desktop\\angular_tp\\Angular_Front\\src\\user-crud\\user-api.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, retry, throwError } from 'rxjs';\nimport { Student } from 'src/models/student';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserApiService {\n\n  apiURL = 'http://localhost:5000';\n  constructor(private http: HttpClient) { }\n\n  httpOption = {\n    headers: new HttpHeaders({\n      'content-type': 'application/json',\n    })\n  }\n\n  getUsers(): Observable<Student> {\n    return this.http.get<Student>(this.apiURL + '/api/students').pipe(retry(1), catchError(this.handleError));\n  }\n\n  getOneUser(id: any): Observable<Student> {\n    return this.http.get<Student>(this.apiURL + '/api/students' + id).pipe(retry(1), catchError(this.handleError));\n  }\n\n  createUser(user: any): Observable<Student> {\n    return this.http.post<Student>(this.apiURL + '/api/students/', JSON.stringify(user), this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n\n  updateUser(id: any, user: any): Observable<Student> {\n    return this.http.put<Student>(this.apiURL + '/api/students' + id, JSON.stringify(user), this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n\n  deleteUser(id: any) {\n    return this.http.delete<Student>(this.apiURL + '/api/studens/' + id, this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n\n  handleError(error: any) {\n    let errMsg = '';\n    if (error.error instanceof ErrorEvent) errMsg = error.error.message;\n    else errMsg = `Error Code : ${error.statut}\\nMessage : ${error.message}`;\n    window.alert(errMsg);\n    return throwError(() => {\n      return errMsg;\n    })\n  }\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,MAAM;;;AAMhE,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADxB,KAAAC,MAAM,GAAG,uBAAuB;IAGhC,KAAAC,UAAU,GAAG;MACXC,OAAO,EAAE,IAAIT,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EANuC;EAQxCU,QAAQA,CAAA;IACN,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAU,IAAI,CAACJ,MAAM,GAAG,eAAe,CAAC,CAACK,IAAI,CAACV,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EAC3G;EAEAC,UAAUA,CAACC,EAAO;IAChB,OAAO,IAAI,CAACT,IAAI,CAACK,GAAG,CAAU,IAAI,CAACJ,MAAM,GAAG,eAAe,GAAGQ,EAAE,CAAC,CAACH,IAAI,CAACV,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EAChH;EAEAG,UAAUA,CAACC,IAAS;IAClB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAU,IAAI,CAACX,MAAM,GAAG,gBAAgB,EAAEY,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,EAAE,IAAI,CAACT,UAAU,CAAC,CAACI,IAAI,CAACV,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACpJ;EAEAQ,UAAUA,CAACN,EAAO,EAAEE,IAAS;IAC3B,OAAO,IAAI,CAACX,IAAI,CAACgB,GAAG,CAAU,IAAI,CAACf,MAAM,GAAG,eAAe,GAAGQ,EAAE,EAAEI,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,EAAE,IAAI,CAACT,UAAU,CAAC,CAACI,IAAI,CAACV,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvJ;EAEAU,UAAUA,CAACR,EAAO;IAChB,OAAO,IAAI,CAACT,IAAI,CAACkB,MAAM,CAAU,IAAI,CAACjB,MAAM,GAAG,eAAe,GAAGQ,EAAE,EAAE,IAAI,CAACP,UAAU,CAAC,CAACI,IAAI,CAACV,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACpI;EAEAA,WAAWA,CAACY,KAAU;IACpB,IAAIC,MAAM,GAAG,EAAE;IACf,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAED,MAAM,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO,CAAC,KAC/DF,MAAM,GAAG,gBAAgBD,KAAK,CAACI,MAAM,eAAeJ,KAAK,CAACG,OAAO,EAAE;IACxEE,MAAM,CAACC,KAAK,CAACL,MAAM,CAAC;IACpB,OAAOvB,UAAU,CAAC,MAAK;MACrB,OAAOuB,MAAM;IACf,CAAC,CAAC;EACJ;EAAC,QAAAM,CAAA,G;qBAvCU5B,cAAc,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdjC,cAAc;IAAAkC,OAAA,EAAdlC,cAAc,CAAAmC,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}