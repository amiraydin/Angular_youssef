{"ast":null,"code":"// import { TICKETS_MOCKED } from '../../mocks/tickets.mock';\nimport { catchError, retry, throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  constructor(http) {\n    this.http = http;\n    /**\n     * Services Documentation:\n     * https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\n     */\n    // private ticketList: Ticket[] = TICKETS_MOCKED;\n    // public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\n    this.apiURL = 'http://localhost:5000';\n    this.httpOption = {\n      headers: new HttpHeaders({\n        'content-type': 'application/json'\n      })\n    };\n  }\n  getTickets() {\n    return this.http.get(this.apiURL + '/api/tickets/').pipe(retry(1), catchError(this.handleError));\n  }\n  getOneTicket(id) {\n    return this.http.get(this.apiURL + '/api/tickets/' + id).pipe(retry(1), catchError(this.handleError));\n  }\n  createTicket(ticket) {\n    return this.http.post(this.apiURL + '/api/tickets/', ticket, this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n  updateTicket(id, ticket) {\n    return this.http.put(this.apiURL + '/api/tickets/' + id, JSON.stringify(ticket), this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n  deleteTicket(id) {\n    return this.http.delete(this.apiURL + '/api/tickets/' + id, this.httpOption).pipe(retry(1), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errMsg = '';\n    if (error.error instanceof ErrorEvent) errMsg = error.error.message;else errMsg = `ErrorText:${error.headers}\\nError Code : ${error.status}\\nMessage : ${error.message}`;\n    window.alert(errMsg);\n    return throwError(() => {\n      return errMsg;\n    });\n  }\n  // addTicket(ticket: Ticket) {\n  //   this.ticketList.push(ticket);\n  //   // this.tickets$.next(this.ticketList);\n  // }\n  archiveTicket(ticket) {\n    ticket.archived = true;\n    // this.tickets$.next(this.ticketList);\n  }\n  static #_ = this.ɵfac = function TicketService_Factory(t) {\n    return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TicketService,\n    factory: TicketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","retry","throwError","HttpHeaders","TicketService","constructor","http","apiURL","httpOption","headers","getTickets","get","pipe","handleError","getOneTicket","id","createTicket","ticket","post","updateTicket","put","JSON","stringify","deleteTicket","delete","error","errMsg","ErrorEvent","message","status","window","alert","archiveTicket","archived","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Amir\\Desktop\\angular_tp\\Angular_Front\\src\\services\\ticket\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Ticket } from '../../models/ticket';\r\n// import { TICKETS_MOCKED } from '../../mocks/tickets.mock';\r\nimport { BehaviorSubject, Observable, catchError, retry, throwError } from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TicketService {\r\n  /**\r\n   * Services Documentation:\r\n   * https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\r\n   */\r\n  // private ticketList: Ticket[] = TICKETS_MOCKED;\r\n  // public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\r\n\r\n  apiURL = 'http://localhost:5000';\r\n\r\n  httpOption = {\r\n    headers: new HttpHeaders({\r\n      'content-type': 'application/json',\r\n    })\r\n  }\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getTickets() {\r\n    return this.http.get<Ticket>(this.apiURL + '/api/tickets/').pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n  getOneTicket(id: any) {\r\n    return this.http.get<Ticket>(this.apiURL + '/api/tickets/' + id).pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n  createTicket(ticket: any) {\r\n    return this.http.post<Ticket>(this.apiURL + '/api/tickets/', ticket, this.httpOption).pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n  updateTicket(id: any, ticket: any) {\r\n    return this.http.put<Ticket>(this.apiURL + '/api/tickets/' + id, JSON.stringify(ticket), this.httpOption).pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n  deleteTicket(id: any) {\r\n    return this.http.delete<Ticket>(this.apiURL + '/api/tickets/' + id, this.httpOption).pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n  handleError(error: HttpErrorResponse) {\r\n    let errMsg = '';\r\n    if (error.error instanceof ErrorEvent) errMsg = error.error.message;\r\n    else errMsg = `ErrorText:${error.headers}\\nError Code : ${error.status}\\nMessage : ${error.message}`;\r\n    window.alert(errMsg);\r\n    return throwError(() => {\r\n      return errMsg;\r\n    })\r\n  }\r\n\r\n  // addTicket(ticket: Ticket) {\r\n  //   this.ticketList.push(ticket);\r\n  //   // this.tickets$.next(this.ticketList);\r\n  // }\r\n\r\n  archiveTicket(ticket: Ticket) {\r\n    ticket.archived = true;\r\n    // this.tickets$.next(this.ticketList);\r\n  }\r\n  // deleteTicket(ticket: Ticket): void {\r\n  //   this.ticketList = this.ticketList.filter(({ title }) => title !== title);\r\n  // }\r\n}\r\n"],"mappings":"AAEA;AACA,SAAsCA,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,MAAM;AACjF,SAAwCC,WAAW,QAAQ,sBAAsB;;;AAKjF,OAAM,MAAOC,aAAa;EAgBxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAfxB;;;;IAIA;IACA;IAEA,KAAAC,MAAM,GAAG,uBAAuB;IAEhC,KAAAC,UAAU,GAAG;MACXC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAGD;EAEAO,UAAUA,CAAA;IACR,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAS,IAAI,CAACJ,MAAM,GAAG,eAAe,CAAC,CAACK,IAAI,CAACX,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAAC;EAC1G;EAEAC,YAAYA,CAACC,EAAO;IAClB,OAAO,IAAI,CAACT,IAAI,CAACK,GAAG,CAAS,IAAI,CAACJ,MAAM,GAAG,eAAe,GAAGQ,EAAE,CAAC,CAACH,IAAI,CAACX,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAAC;EAC/G;EAEAG,YAAYA,CAACC,MAAW;IACtB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAS,IAAI,CAACX,MAAM,GAAG,eAAe,EAAEU,MAAM,EAAE,IAAI,CAACT,UAAU,CAAC,CAACI,IAAI,CAACX,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAAC;EACpI;EAEAM,YAAYA,CAACJ,EAAO,EAAEE,MAAW;IAC/B,OAAO,IAAI,CAACX,IAAI,CAACc,GAAG,CAAS,IAAI,CAACb,MAAM,GAAG,eAAe,GAAGQ,EAAE,EAAEM,IAAI,CAACC,SAAS,CAACL,MAAM,CAAC,EAAE,IAAI,CAACT,UAAU,CAAC,CAACI,IAAI,CAACX,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAAC;EACxJ;EAEAU,YAAYA,CAACR,EAAO;IAClB,OAAO,IAAI,CAACT,IAAI,CAACkB,MAAM,CAAS,IAAI,CAACjB,MAAM,GAAG,eAAe,GAAGQ,EAAE,EAAE,IAAI,CAACP,UAAU,CAAC,CAACI,IAAI,CAACX,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAAC;EACnI;EAEAA,WAAWA,CAACY,KAAwB;IAClC,IAAIC,MAAM,GAAG,EAAE;IACf,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAED,MAAM,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO,CAAC,KAC/DF,MAAM,GAAG,aAAaD,KAAK,CAAChB,OAAO,kBAAkBgB,KAAK,CAACI,MAAM,eAAeJ,KAAK,CAACG,OAAO,EAAE;IACpGE,MAAM,CAACC,KAAK,CAACL,MAAM,CAAC;IACpB,OAAOxB,UAAU,CAAC,MAAK;MACrB,OAAOwB,MAAM;IACf,CAAC,CAAC;EACJ;EAEA;EACA;EACA;EACA;EAEAM,aAAaA,CAACf,MAAc;IAC1BA,MAAM,CAACgB,QAAQ,GAAG,IAAI;IACtB;EACF;EAAC,QAAAC,CAAA,G;qBAzDU9B,aAAa,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbnC,aAAa;IAAAoC,OAAA,EAAbpC,aAAa,CAAAqC,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}